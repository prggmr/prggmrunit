#!/usr/bin/php
<?php
/**
 * prggmrunit command line
 */
$usage = "usage: prggmrunit [options...] file...

Options:
  -v/--version  Display prggmrunit version.
  -s/--sync     Sync all timer clocks with the daemons clock on startup.
  -t/--time     Length of time to run in milliseconds.
  -h/--help     Shows this message.
  -b/--buffer   Use output buffering, enable if you get no results.
  -e/--emulate  Run the emulator for the given framework.
  -o/--output   Output generator to use.
  -c/--colors   Generate output with colors
  --shortvars   Enable or disable shortened variable output. DEFAULT=1
  --vdepth      Depth to transverse variable outputs. DEFAULT=2
  --em-debug    If you are sure of what you are doing.
";

// force prggmr debug for traces
define('PRGGMR_DEBUG', true);

if (count($argv) == 1) {
    exit($usage);
}

$sync = false;
$ttr = null;
// last param is file
$runfile = $argv[$argc - 1];
$options = getopt(
    'qwe:rt:yuio:pasdfghjklzxcvbnm',
    array(
        'buffer', 'help', 'output:', 'version', 'sync', 'time:', 'emulate:', 'shortvars::',
        'vdepth:', 'colors', 'em-debug'
    ));

// parse args and check options
foreach ($options as $_i => $_arg) {
    switch ($_i) {
        case 'v':
        case 'version':
            $showversion = true;
            break;
        case 'shortvars':
            switch ($_arg) {
                default:
                    define('PRGGMRUNIT_SHORTVARS', true);
                    break;
                case 1:
                case 'on':
                    define('PRGGMRUNIT_SHORTVARS', true);
                    break;
                case 0:
                case 'off':
                    define('PRGGMRUNIT_SHORTVARS', false);
                    break;
            }
            break;
        case 'vdepth':
            if (false === $_arg || !is_int($_arg + 0)) {
                exit(sprintf(
                    "invalid format option '%s'\n%s",
                    $_i, $usage
                ));
            }
            define('PRGGMRUNIT_MAXVARDEPTH', $_arg);
            break;
        case 's':
        case 'sync':
            $sync = true;
            break;
        case 't':
        case 'time':
            if (false === $_arg || !is_int($_arg + 0)) {
                exit(sprintf(
                    "invalid format option '%s'\n%s",
                    $_i, $usage
                ));
            }
            $ttr = $_arg + 0;
            break;
        case 'h':
        case 'help':
            exit($usage);
            break;
        case 'b':
        case 'buffer':
            $outputbuffer = true;
            break;
        case 'e':
        case 'emulate':
            if (false === $_arg) {
                exit(sprintf(
                    "invalid format option '%s'\n%s",
                    $_i, $usage
                ));
            }
            $emulate = $_arg;
            break;
        case 'em-debug':
            // lets make this fun
            define('PRGGMRUNIT_EMULATION_DEBUG', true);
            break;
        case 'o':
        case 'output':
            if (false === $_arg) {
                exit(sprintf(
                    "invalid format option '%s'\n%s",
                    $_i, $usage
                ));
            }
            $output = $_arg;
            break;
        case 'c':
        case 'colors':
            define('PRGGMRUNIT_OUTPUT_COLORS', true);
            break;
        default:
            exit(sprintf(
                    "invalid option '%s'\n%s",
                    $_i, $usage
                ));
            break;
    }
}

// DEFAULT DISABLE OUTPUT BUFERING
if (!isset($outputbuffer)) {
    $outputbuffer = false;
}

// NO FILE PROVIDED
if (false === $runfile) {
    exit($usage);
}

// INCLUDE LIBRARY
$prcwd = dirname(realpath(__FILE__));
require_once $prcwd.'/../lib/prggmrunit/prggmrunit.php';
require_once $prcwd.'/../lib/prggmrunit/assertions.php';


//VERSION CHECK
if (isset($showversion)) {
    exit("prggmrunit ".PRGGMRUNIT_VERSION."
");
}

// ARGUMENTS
// note this works for now ... if it at somepoint it causes problems
// it can be changed
array_shift($argv);
foreach ($argv as $_i => $_v) {
    if (strpos($_v, '-') !== false) unset($argv[$_i]);
}

// OUTPUT GENERATOR
if (isset($output)) {
    $file = sprintf(
        '%s/../lib/prggmrunit/output/%s.php',
        $prcwd,
        $output);
    if (file_exists($file)) {
        require_once $file;
        $class = sprintf('\prggmrunit\output\%s',
            ucfirst($output)
        );
        if (!class_exists($class)) {
            exit(sprintf(
                "Output class (%s) could not be found",
                $class)
            );
        }
        $class = new $class();
        \prggmrunit\Output::initalize($class, $outputbuffer);
    } else {
        exit(sprintf(
            "Could not load output source (%s)",
            $output)
        );
    }
} else {
    \prggmrunit\Output::initalize(null, $outputbuffer);
}

// INCLUDE THE TESTS

// EMULATION MODE
if (isset($emulate)) {
    if (!array_key_exists($emulate, \prggmrunit\Emulator::getEmulators())) {
        \prggmrunit\Output::send(sprintf(
            "Emulator '%s' is not a valid emulator\nSupported Emulators\n-----\n%s\n",
            $emulate,
            implode("\n", \prggmrunit\Emulator::getEmulators())
        ), \prggmrunit\Output::ERROR);
    } else {
        if (\prggmrunit\Emulator::emulate($emulate, $argv)) {
            \prggmrunit\Output::send(sprintf(
                "Running in emulation mode, emulating (%s)%s",
                $emulate, PHP_EOL
            ), \prggmrunit\Output::SYSTEM);
            if (defined('PRGGMRUNIT_EMULATION_DEBUG') &&
                PRGGMRUNIT_EMULATION_DEBUG == true){
                \prggmrunit\Output::send(
                    "EMULATION DEBUG MODE TURNED ON (Have fun)".PHP_EOL
                , \prggmrunit\Output::DEBUG);
            }
        } else {
            \prggmrunit\Output::send(sprintf(
                "Failed to load emulator (%s)",
                $emulate
            ), \prggmrunit\Output::ERROR);
        }
    }
} else {
    // prggmrunit implementation nice and easy
    foreach ($argv as $_file) {
        if (!file_exists($_file)) {
            \prggmrunit\Output::send("Unknown file : $_file\n", \prggmrunit\Output::ERROR);
        } else {
            require_once $_file;
        }
    }
}

// Run the daemon child!
Prggmrunit::instance()->run($sync, $ttr);