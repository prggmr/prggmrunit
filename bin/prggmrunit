#!/usr/bin/php
<?php
/**
 * Directly run files in a prggmr daemon.
 */
$usage = "usage: prggmrunit [options] FILE

Current options:
  -v    Display prggmrunit version
  -s    Sync all timer clocks with the daemons clock on startup.
  -t    Length of time to run in milliseconds
  -h    Shows this message
  -o    Use output buffering, enable if you get no results.
  
Examples:

[ Run unit tests in testfile.php ]
    
    prggmrunit testfile.php
    
[ Run for 5 seconds and end regardless of testing status ]
    
    prggmrunit -t=5000 testfile.php
    
";

// force prggmr debug for traces
define('PRGGMR_DEBUG', true);

if (count($argv) == 1) {
    exit($usage);
}

$sync = false;
$ttr = null;
// last param is file
$runfile = $argv[$argc - 1];
$options = getopt('t:shvo');

// parse args and check for options
foreach ($options as $_i => $_arg) {
    switch ($_i) {
        case 'v':
            $showversion = true;
            break;
        case 's':
            $sync = true;
            break;
        case 't':
            if (false === $_arg || !is_int($_arg + 0)) {
                exit("invalid option 't'\n".$usage);
            }
            $ttr = $_arg + 0;
            break;
        case 'h':
            exit($usage);
            break;
        case 'o':
            $outputbuffer = true;
            break;
        default:
            // this does nothing
            break;
    }
}

if (!isset($outputbuffer)) {
    $outputbuffer = false;
}

if (false === $runfile) {
    exit($usage);
}

$prcwd = dirname(realpath(__FILE__));

require $prcwd.'/../lib/prggmrunit/prggmrunit.php';
require $prcwd.'/../lib/prggmrunit/assertions.php';

if (isset($showversion)) {
    exit("prggmrunit ".PRGGMRUNIT_VERSION."
");
}

if ($outputbuffer) {
    ob_start();
}

$dir = getcwd().'/';


$prggmrunit = Prggmrunit::instance();

// BEGINNING OF IT ALL
$prggmrunit->subscribe(\prggmrunit\Events::START, function($event) use (&$prggmrunit){
    $prggmrunit->start_time = $prggmrunit->getMilliseconds();
    echo "prggmrunit ".PRGGMRUNIT_VERSION."\nBy Nickolas Whiting\n\n";
});

$prggmrunit->subscribe(\prggmrunit\Events::TEST_ASSERTION_PASS, function($event){
    echo ".";
});

$prggmrunit->subscribe(\prggmrunit\Events::TEST_ASSERTION_FAIL, function($event){
    echo "F";
});

$prggmrunit->subscribe(\prggmrunit\Events::TEST_ASSERTION_SKIP, function($event){
    echo "S";
});

// This needs to be cleaned with some bleach ...
$prggmrunit->subscribe(\prggmrunit\Events::END, function($test) use (&$prggmrunit){
    
    $end_time = $prggmrunit->getMilliseconds();
    $tests = $prggmrunit->getTests();
    
    // testing totals
    $testsP = 0;
    $assertionP = 0;
    $testsF = 0;
    $assertionF = 0;
    $testsS = 0;
    $assertionS = 0;
    $testsC = 0;
    $assertionC = 0;
    
    $failures = array();
    
    foreach ($tests as $_index => $_test) {
        $testsC++;
        switch ($_test->getState()) {
            case \prggmrunit\Test::FAIL:
                $failures[$_index] = $_test->getStateMessage();
                $testsF += 1;
                break;
            case \prggmrunit\Test::PASS:
                $testsP += 1;
                break;
            case \prggmrunit\Test::SKIP:
                $testsS += 1;
                break;
        }
        $assertionF = $assertionF + $_test->failedAssertions();
        $assertionP = $assertionP + $_test->passedAssertions();
        $assertionS += $_test->skippedAssertions();
        $assertionC += $_test->assertionCount();
    }
    
    $runtime = round(($end_time - $prggmrunit->start_time) / 1000, 4);
    if (0 != count($failures)) {
        echo "\n\n============================================================";
        echo "\nFailures Detected\n";
        foreach ($failures as $_k => $_fail) {
            echo "\n------------------------------------------------------------\n";
            $file = function($file) {
                $array = explode('/', $file);
                return str_replace('.php', '', $array[count($array) - 1]);
            };
            echo  sprintf(
                "FAIL : %s (%s)\n------------------------------------------------------------\nLine : %s\nMessage : %s\n\n",
                $_fail[1][0]['file'],
                $_k,
                $_fail[1][0]['line'],
                $_fail[0]
            );
        }
    }

    $size = function($size) {
        $filesizename = array(" Bytes", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB");
        return $size ? round($size/pow(1024, ($i = floor(log($size, 1024)))), 2) . $filesizename[$i] : '0 Bytes';
    };
    echo "\n============================================================";
    echo "\nRan $testsC tests in $runtime seconds and used ".$size(round(memory_get_peak_usage(true), 4));
    echo "\n\n";
    if ($testsF != 0) {
        echo sprintf("FAIL (failures=%s, success=%s, skipped=%s)", $testsF, $testsP, $testsS);
    } else {
        echo sprintf("PASS (success=%s, skipped=%s)", $testsP, $testsS);
    }
    echo "\nAssertions (pass=$assertionP, fail=$assertionF, skip=$assertionS)\n";
});

// include test files from argument
if (!file_exists($runfile)) {
    die("Unknown file : $runfile\n");
} else {
    require $runfile;
}
// Run the daemon child!
$prggmrunit->run($sync, $ttr);
if ($outputbuffer) {
    ob_end_flush();
}