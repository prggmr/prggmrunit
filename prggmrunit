#!/usr/local/bin/php
<?php
namespace prggmrunit;
require 'lib/prggmrunit/prggmrunit.php';
require 'lib/prggmrunit/api.php';

/**
 * equals test
 */
$event->addTest(function($test, $expect, $actual){
    $test->test(($expect === $actual), sprintf(
        "Failed asserting %s equals %s",
        print_r($actual, true),
        print_r($expect, true)
    ));
}, 'equal');

/**
 * event test
 */
$event->addTest(function($test, $signal, $expected, $params = null, $event = null, $engine = null){
    if (null !== $engine) {
        $fire = $engine->fire($signal, $params, $event);
    } else {
        $fire = \Prggmr::instance()->fire($signal, $params, $event);
    }
    $test->test(($fire->getData() === $expected), sprintf(
        "Failed asserting event data %s equals %s",
        print_r($fire->getData(), true),
        print_r($expected, true)
    ));
}, 'event');

/**
 * exception test
 */
$event->addTest(function($test, $exception, $code){
    try {
        $code();
    } catch (\Exception $e) {
        $test->test((get_class($e) === $exception), sprintf(
            'Exception %s was thrown expected %s',
            get_class($e),
            $exception
        ));
        return true;
    }
    $test->test(false, 'Exception not thrown');
}, 'exception');

/**
 * true
 */
$event->addTest(function($test, $var){
    $test->test(($var === true), sprintf(
        'Failed asserting %s equals true',
        print_r($var, true)
    ));
}, 'true');

/**
 * false
 */
$event->addTest(function($test, $var){
    $test->test(($var === false), sprintf(
        'Failed asserting %s equals false',
        print_r($var, true)
    ));
}, 'false');

/**
 * null
 */
$event->addTest(function($test, $var){
    $test->test(($var === null), sprintf(
        'Failed asserting %s equals null',
        print_r($var, true)
    ));
}, 'null');

/**
 * array
 */
$event->addTest(function($test, $array){
    $test->test((is_array($array)), sprintf(
        'Failed asserting %s is an array',
        gettype($array)
    ));
}, 'array');

/**
 * string
 */
$event->addTest(function($test, $string){
    $test->test((is_string($string)), sprintf(
        'Failed asserting %s is a string',
        gettype($array)
    ));
}, 'string');

/**
 * integer
 */
$event->addTest(function($test, $int){
    $test->test((is_int($int)), sprintf(
        'Failed asserting %s is an integer',
        gettype($array)
    ));
}, 'integer');

/**
 * float
 */
$event->addTest(function($test, $float){
    $test->test((is_float($float)), sprintf(
        'Failed asserting %s is a float',
        gettype($array)
    ));
}, 'float');

/**
 * object
 */
$event->addTest(function($test, $object){
    $test->test((is_object($object)), sprintf(
        'Failed asserting %s is an object',
        gettype($array)
    ));
}, 'object');

/**
 * instanceof
 */
$event->addTest(function($test, $class, $object){
    $test->test((get_class($class) === $object), sprintf(
        'Failed asserting %s is an instance of %s',
        get_class($class),
        $object
    ));
}, 'instanceof');

// dir
$dir = getcwd().'/';

// BEGINNING OF IT ALL
$engine->subscribe(Events::START, function($event){
    $event->setData(\Prggmr::instance()->getMilliseconds(), 'start_time');
    echo "prggmrUnit ".PRGGMRUNIT_VERSION."\n\n";
});

// END OF IT ALL
$engine->subscribe(Events::END, function($test){
    $runtime = round((\Prggmr::instance()->getMilliseconds() - $test->getData('start_time')) / 1000, 4);
    $testCount = $test->testCount() - 1;
    $pass = $test->passed();
    $passTests = 0;
    $passAssertions = 0;
    $skippedTests = 0;
    foreach ($pass as $_pass) {
        $passTests++;
        $passAssertions += count($_pass);
    }
    $fail = $test->failures();
    $failTests = 0;
    $failAssertions = 0;
    foreach ($fail as $_fail) {
        $failTests++;
        $failedAssertions += count($_fail);
    }
    $assertions = $test->assertionCount();
    if (0 != count($fail)) {
        echo "\n\n============================================================";
        echo "\nFailures Detected\n";
        foreach ($fail as $_k => $_fail) {
            //echo sprintf("\nTest ( %s ) had ( %s ) failures\n", $_k, count($_fail));
            for ($i=0;$i!=count($_fail);$i++){
                echo "\n------------------------------------------------------------\n";
                $file = function($file) {
                    $array = explode('/', $file);
                    return str_replace('.php', '', $array[count($array) - 1]);
                };
                echo  sprintf(
                    "FAIL : %s (%s)\n------------------------------------------------------------\nLine : %s\nMessage : %s\n\n",
                    $file($_fail[$i]['trace']['file']),
                    $_k,
                    $_fail[$i]['trace']['line'],
                    $_fail[$i]['message']
                );
            }
        }
    }

    $size = function($size) {
        $filesizename = array(" Bytes", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB");
        return $size ? round($size/pow(1024, ($i = floor(log($size, 1024)))), 2) . $filesizename[$i] : '0 Bytes';
    };
    echo "\n\n============================================================";
    echo "\nRan $testCount tests in $runtime seconds and used ".$size(round(memory_get_peak_usage(true), 4));
    echo "\n\n";
    if ($failTests != 0) {
        echo sprintf("FAIL (failures=%s, success=%s, skipped=%s)", $failTests, $passTests, $skippedTests);
    } else {
        echo sprintf("PASS (success=%s, skipped=%s)", $passTests, $skippedTests);
    }
    echo "\nAssertions $passAssertions/".$test->assertionCount()."\n";
});

// validates if there are any valid tests to be run
$engine->subscribe(Events::TEST, function($event){
    if ($GLOBALS['_PRGGMRUNIT_ENGINE']->queue(Events::TEST)->count() == 2) {
        exit("Failed to recieve any tests to run!\n");
    }
}, 'hasTestsCheck', 0, null, 1);

// RUN!
$engine->fire(Events::START, null, $GLOBALS['_PRGGMRUNIT_EVENT']);

// include test files from argument
if (count($argv) == 1) {
	exit("Usage: prggmrunit test\n");
} else {
	$error = array();
	for ($i=1;$i!=count($argv);$i++){
		$ext = (stripos($argv[$i], '.php') !== false) ? '' : '.php';
		if (file_exists($dir.$argv[$i].$ext)) {
			require $dir.$argv[$i].$ext;
		} else {
			$error[] = "Invalid test file: ".$argv[$i];
		}
	}
	if (count($error) != 0) {
		echo "\n----------------------------------";
		echo "\nErrors\n";
		exit(implode("\n",$error)."\n");
	}
}

// RUN THE TESTS
$engine->fire(Events::TEST, null, $GLOBALS['_PRGGMRUNIT_EVENT']);

// FINISH IT OFF
$engine->fire(Events::END, null, $GLOBALS['_PRGGMRUNIT_EVENT']);