#!/usr/bin/php
<?php

require 'lib/prggmrunit/prggmrunit.php';
require 'lib/prggmrunit/assertions.php';

$dir = getcwd().'/';

// BEGINNING OF IT ALL
$prggmrunit->subscribe(\prggmrunit\Events::START, function($event){
    $event->setData(\Prggmr::instance()->getMilliseconds(), 'start_time');
    echo "prggmrunit ".PRGGMRUNIT_VERSION."\nBy Nickolas Whiting\n\n";
});

$prggmrunit->subscribe(\prggmrunit\Events::TEST_ASSERTION_PASS, function($e){
    echo '.';
});

// END OF IT ALL
//$prggmrunit->subscribe(\prggmrunit\Events::END, function($test){
//    $runtime = round((\Prggmr::instance()->getMilliseconds() - $test->getData('start_time')) / 1000, 4);
//    $testCount = $test->testCount() - 1;
//    $pass = $test->passed();
//    $passTests = 0;
//    $passAssertions = 0;
//    $skippedTests = 0;
//    foreach ($pass as $_pass) {
//        $passTests++;
//        $passAssertions += count($_pass);
//    }
//    $fail = $test->failures();
//    $failTests = 0;
//    $failAssertions = 0;
//    foreach ($fail as $_fail) {
//        $failTests++;
//        $failedAssertions += count($_fail);
//    }
//    $assertions = $test->assertionCount();
//    if (0 != count($fail)) {
//        echo "\n\n============================================================";
//        echo "\nFailures Detected\n";
//        foreach ($fail as $_k => $_fail) {
//            //echo sprintf("\nTest ( %s ) had ( %s ) failures\n", $_k, count($_fail));
//            for ($i=0;$i!=count($_fail);$i++){
//                echo "\n------------------------------------------------------------\n";
//                $file = function($file) {
//                    $array = explode('/', $file);
//                    return str_replace('.php', '', $array[count($array) - 1]);
//                };
//                echo  sprintf(
//                    "FAIL : %s (%s)\n------------------------------------------------------------\nLine : %s\nMessage : %s\n\n",
//                    $file($_fail[$i]['trace']['file']),
//                    $_k,
//                    $_fail[$i]['trace']['line'],
//                    $_fail[$i]['message']
//                );
//            }
//        }
//    }
//
//    $size = function($size) {
//        $filesizename = array(" Bytes", " KB", " MB", " GB", " TB", " PB", " EB", " ZB", " YB");
//        return $size ? round($size/pow(1024, ($i = floor(log($size, 1024)))), 2) . $filesizename[$i] : '0 Bytes';
//    };
//    echo "\n\n============================================================";
//    echo "\nRan $testCount tests in $runtime seconds and used ".$size(round(memory_get_peak_usage(true), 4));
//    echo "\n\n";
//    if ($failTests != 0) {
//        echo sprintf("FAIL (failures=%s, success=%s, skipped=%s)", $failTests, $passTests, $skippedTests);
//    } else {
//        echo sprintf("PASS (success=%s, skipped=%s)", $passTests, $skippedTests);
//    }
//    echo "\nAssertions $passAssertions/".$test->assertionCount()."\n";
//});

// validates if there are any valid tests to be run
//$engine->subscribe(\prggmrunit\Events::TEST, function($event){
//    if ($GLOBALS['_PRGGMRUNIT_ENGINE']->queue(\prggmrunit\Events::TEST)->count() == 2) {
//        exit("Failed to recieve any tests to run!\n");
//    }
//}, 'hasTestsCheck', 0, null, 1);

// include test files from argument
if (count($argv) == 1) {
	exit("Usage: prggmrunit test\n");
} else {
	$error = array();
	for ($i=1;$i!=count($argv);$i++){
		$ext = (stripos($argv[$i], '.php') !== false) ? '' : '.php';
		if (file_exists($dir.$argv[$i].$ext)) {
			require $dir.$argv[$i].$ext;
		} else {
			$error[] = "Invalid test file: ".$argv[$i];
		}
	}
	if (count($error) != 0) {
		echo "\n----------------------------------";
		echo "\nErrors\n";
		exit(implode("\n",$error)."\n");
	}
}

// GO GO UNIT TEST!!
$prggmrunit->run();
echo "\n";